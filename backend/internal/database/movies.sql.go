// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: movies.sql

package database

import (
	"context"
	"database/sql"
)

const getAllMovies = `-- name: GetAllMovies :many
SELECT id, title, description
FROM movies
`

type GetAllMoviesRow struct {
	ID          int32
	Title       string
	Description sql.NullString
}

func (q *Queries) GetAllMovies(ctx context.Context) ([]GetAllMoviesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllMoviesRow
	for rows.Next() {
		var i GetAllMoviesRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMovieByTitle = `-- name: GetMovieByTitle :one
SELECT id, description
FROM movies
WHERE title = $1
`

type GetMovieByTitleRow struct {
	ID          int32
	Description sql.NullString
}

func (q *Queries) GetMovieByTitle(ctx context.Context, title string) (GetMovieByTitleRow, error) {
	row := q.db.QueryRowContext(ctx, getMovieByTitle, title)
	var i GetMovieByTitleRow
	err := row.Scan(&i.ID, &i.Description)
	return i, err
}

const uploadMovie = `-- name: UploadMovie :exec
INSERT INTO movies (title, description, uploaded_at, user_id)
VALUES ($1, $2, NOW(), $3)
`

type UploadMovieParams struct {
	Title       string
	Description sql.NullString
	UserID      int32
}

func (q *Queries) UploadMovie(ctx context.Context, arg UploadMovieParams) error {
	_, err := q.db.ExecContext(ctx, uploadMovie, arg.Title, arg.Description, arg.UserID)
	return err
}
